require 'ffi'

class DEBUG_BREAKPOINT_PARAMETERS < FFI::Struct
  layout :offset, :uint64,
     :id, :ulong,
     :break_type, :ulong,
     :proc_type, :ulong,
     :flags, :ulong,
     :data_size, :ulong,
     :data_access_type, :ulong,
     :pass_count, :ulong,
     :current_pass_count, :ulong,
     :match_thread, :ulong,
     :command_size, :ulong,
     :offset_expression_size, :ulong
end

class Breakpoint
  # Local Constants
  DEBUG_BREAKPOINT_CODE       = 0
  DEBUG_BREAKPOINT_DATA       = 1
  DEBUG_BREAKPOINT_TIME       = 2
  DEBUG_BREAKPOINT_GO_ONLY    = 0x00000001
  DEBUG_BREAKPOINT_DEFERRED   = 0x00000002
  DEBUG_BREAKPOINT_ENABLED    = 0x00000004
  DEBUG_BREAKPOINT_ADDER_ONLY = 0x00000008
  DEBUG_BREAKPOINT_ONE_SHOT   = 0x00000010
  DEBUG_BREAK_READ            = 0x00000001
  DEBUG_BREAK_WRITE           = 0x00000002
  DEBUG_BREAK_EXECUTE         = 0x00000004
  DEBUG_BREAK_IO              = 0x00000008
  NUM_APIS                    = 24

  def initialize( ptr )
    @interface_ptr = ptr
    @vtable=FFI::Pointer.new(@interface_ptr.read_pointer).read_array_of_pointer( NUM_APIS ).map {|addr|
      FFI::Pointer.new( addr )
    }
    # These are autogenerated from dbgeng.h and may contain errors!
    @api_dispatch_table={
      :QueryInterface      => FFI::Function.new( :ulong, [:pointer,:pointer,:pointer], @vtable[0], :convention => :stdcall  ),
      :AddRef              => FFI::Function.new( :ulong, [:pointer], @vtable[1], :convention => :stdcall  ),
      :Release             => FFI::Function.new( :ulong, [:pointer], @vtable[2], :convention => :stdcall  ),
      :GetId               => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[3], :convention => :stdcall  ),
      :GetType             => FFI::Function.new( :ulong, [:pointer,:pointer,:pointer], @vtable[4], :convention => :stdcall  ),
      :GetAdder            => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[5], :convention => :stdcall  ),
      :GetFlags            => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[6], :convention => :stdcall  ),
      :AddFlags            => FFI::Function.new( :ulong, [:pointer,:ulong], @vtable[7], :convention => :stdcall  ),
      :RemoveFlags         => FFI::Function.new( :ulong, [:pointer,:ulong], @vtable[8], :convention => :stdcall  ),
      :SetFlags            => FFI::Function.new( :ulong, [:pointer,:ulong], @vtable[9], :convention => :stdcall  ),
      :GetOffset           => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[10], :convention => :stdcall  ),
      :SetOffset           => FFI::Function.new( :ulong, [:pointer,:uint64], @vtable[11], :convention => :stdcall  ),
      :GetDataParameters   => FFI::Function.new( :ulong, [:pointer,:pointer,:pointer], @vtable[12], :convention => :stdcall  ),
      :SetDataParameters   => FFI::Function.new( :ulong, [:pointer,:ulong,:ulong], @vtable[13], :convention => :stdcall  ),
      :GetPassCount        => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[14], :convention => :stdcall  ),
      :SetPassCount        => FFI::Function.new( :ulong, [:pointer,:ulong], @vtable[15], :convention => :stdcall  ),
      :GetCurrentPassCount => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[16], :convention => :stdcall  ),
      :GetMatchThreadId    => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[17], :convention => :stdcall  ),
      :SetMatchThreadId    => FFI::Function.new( :ulong, [:pointer,:ulong], @vtable[18], :convention => :stdcall  ),
      :GetCommand          => FFI::Function.new( :ulong, [:pointer,:pointer,:ulong,:pointer], @vtable[19], :convention => :stdcall  ),
      :SetCommand          => FFI::Function.new( :ulong, [:pointer,:string], @vtable[20], :convention => :stdcall  ),
      :GetOffsetExpression => FFI::Function.new( :ulong, [:pointer,:pointer,:ulong,:pointer], @vtable[21], :convention => :stdcall  ),
      :SetOffsetExpression => FFI::Function.new( :ulong, [:pointer,:string], @vtable[22], :convention => :stdcall  ),
      :GetParameters       => FFI::Function.new( :ulong, [:pointer,:pointer], @vtable[23], :convention => :stdcall  )
    }
  end

  def ptr
    @interface_ptr
  end

  def method_missing( meth, *args )
    raise ArgumentError, "#{self.class}: Invalid API #{meth}" unless @api_dispatch_table[meth]
    @api_dispatch_table[meth].call( @interface_ptr, *args )
  end
end

